Protokoll vom 11.7.2016

Verteilen der Aufgaben für die nächsten Tage:
Anne A: - Benutzerhandbuch schreiben
        - README schreiben
        - Rechtschreibfehler in den Aufgaben korrigieren
        - Namen der zu schreibenden Klassen aus den Aufgaben entfernen
        - falls genug Zeit: Programm hübsch machen

Tim: - Slider für die Babystep Zeit
     - Logik in der Klasse TDDCycle mit GUI verbinden

Philipp: - Label statusCycle
         - Textdatei für Aufgaben von außen laden
	 - Bericht schreiben

Cedric: - Akzeptanztests

Anne B: - Babysteps
        - alten SourceCode in TextArea schreiben, wenn Zeit abgelaufen ist


Protokoll vom 7.7.2016

- Gradle Probleme (compiliert nicht mehr)
 -> müssen behoben werden

-GUI Überarbeitung
	- Fortschrittsanzeige
	- Tabs
	- Buttons verschieben

-> TODO: GUI muss mit Logik verbunden werden

Protokoll vom 5.7.2016

- Besprechung allgemeiner Aufbau und Erreichung der Ziele
- Probleme lösen
- GUI weiter bearbeiten
-> insbesondere Lauffähigkeit(Lösen von Exception), Einbettung mehrerer Stages, Funktionenvergabe
- Timer in fxml einbinden
- Timer testen
- Babysteps integrieren
- Vergabe von weiteren Aufgaben

Protokoll vom 30.06.2016

neues Mitglied: Tim Matussek, tim.matussek@hhu.de

Themenpunkte:
- GUI erstellt
- Babysteps besprochen

- Interfaces erstellt:
Interface TDDT:
- String getPhase();
- void setPhase (String phase);

Interface ADTT:
- void TestFinished();
- boolean TestCompiled();


Protokoll vom 28.06.2016

Themenpunkte:
- Git Probleme gelöst
- Addon ATDD Funktionsweise und mögliche Arten der Implementierung besprochen
ATDD soll zusätzlich zu dem TDD Zyklus einen weiteren übergeordneten Zyklus erzwingen. Der Akzeptanztest im ATTD Zyklus soll angelehnt sein an eine oder mehrere User-Storys, welche sozusagen als übergeordnete Ziele anzusehen sind, die implementiert werden sollen. Die User-Stories sollen sozusagen vom Kunden kommen, der das Programm/Projekt/... bestellt/implementiert haben möchte.
Eine Implementierung ist eventuell als eigene GUI mit 3 Textfeldern machbar (viel copy&paste) oder als Erweiterung der bereits bestehen GUI mit 2 Textfeldern, also vor dem Start der GUI an- und abschaltbar.


Protokoll vom 20.06.2016 

Themenpunkte:
- Projekt
- Einrichtung von Git und GitHub
- Struktur
- kurze Git Erläuterung
- Genereller Ablauf


Projekt:
Alle Projekte 01 an Anne A. schicken für die Erstellung des Katalogs
Aufteilung der Aufgaben:
	Anne A. macht den Katalog
	Anne B. schaut sich FXML an zur Einbindung in das Projekt
	Cedric klärt die Built Dependencies und Einbindung von Travis
	Philipp macht sich mit Gradle und Groovy warm 

Struktur:
Das Repository besitzt mindestens zwei Branches:
	- develop
		• eventuell auftretende merge conflicts sollen hier abgefangen werden
		• nur funktionierenden Code dort pushen

	- master	
		• merged nur mit dem develop Branch

Weitere Zweige zum erarbeiten von Methoden oder Implementierungen für die GUI 
in lokalen feature Zweigen erzeugen.
Können auch gepusht werden, wenn dies angekündigt ist

Kurze Git Erläuterung:

Erzeuge einen Branch:
git checkout -b feature/feature_name
	erstellt lokal den Branch feature/feature_name und wechselt direkt zu diesem
	von nun an werden Commits nur auf diesem Branch gespeichert

git push -u origin feature/feature_name
	pusht den Branch auf das GitHub Repository

git checkout develop
	wechseln in den Branch develop

git merge feature/feature_name
	Mergen von feature/feature_name mit develop

bei keinem Konflikt bietet es sich an, den Branch feature/feature_name zu löschen
git branch -d feature/feature_name
	damit wird der Branch gelöscht

git branch
	zeigt alle Branches an auf die man bereits gewechselt hat
   aber vorallem zeigt mittels \* an auf welchem Branch man sich befindet

git branch -v
	listet alle Branches auf mit der ersten Zeile des jeweils letzten Commits


Genereller Ablauf:
Es wird stehts im develop Branch begonnen
Bevor das Projekt geöffnet wird einmal mit

	git pull

das Projekt im develop Branch aktualisieren

Danach entweder seine Ergänzung aus einem lokalen Branch mergen oder neuen Branch erstellen

Vor jedem mergen/pushen auch wieder mit 

	git pull

den develop Branch aktualisieren

Sonstige Routine:
Commits nach relativ wenig Veränderung machen.


GitHub:
Einbinden des rsa keys
Erstellen des Teams nofuture und erzeugen
erstellen des Repos


Besprechung:
Es gibt eine Protokoll Datei, die wöchentlich erweitert wird.
Der neue Eintrag wird über den alten gesetzt.

